Problem with Shared Variables in Multithreading
When you have multiple threads in a program that share a variable, data structure, or resource, synchronization issues can occur. Here's why:

Threads: Imagine you have two workers (threads) trying to work with the same piece of information (shared variable).
Simultaneous Access: If one worker tries to change the information at the same time the other worker tries to read it, you can get inconsistent or incorrect results.
Java Memory Model (JMM) and Atomicity
The Java Memory Model (JMM) helps manage how threads interact with memory. Here's what it says about atomicity:

Atomic Operations: Some operations are atomic, meaning they complete in a single step relative to other threads. No other thread can see an intermediate state.
32-bit Atomicity: In Java, operations on variables that are 32 bits or smaller (like boolean, int, etc.) are atomic. This means:
If one thread changes a boolean variable, another thread won't see a half-finished change.
For example, if one thread sets a boolean flag to false, another thread reading the flag will either see the old value (true) or the new value (false), but not a corrupted value.
Example Explanation
Let's use an example with a boolean flag called running:

Thread A: This is your animation thread. It periodically checks if running is true to decide whether to continue the animation.
Thread B: This might be a control thread that can stop the animation by setting running to false.
If Thread A is reading running while Thread B is setting it to false, the JMM guarantees that:

The read operation by Thread A and the write operation by Thread B will not overlap in a way that causes Thread A to see an invalid or corrupted value.
Thread A will either see running as true or false, but not some weird in-between state.
Why Synchronization is Needed
Even though the JMM guarantees atomicity for 32-bit variables, more complex operations (like updating a data structure) or operations on larger variables (like long or double, which are 64 bits) are not atomic without explicit synchronization. Therefore:

You need to use synchronization mechanisms (like synchronized blocks, ReentrantLock, or volatile keyword) to ensure that complex operations are performed without interference from other threads.
Summary
Atomicity in Java: Operations on 32-bit variables (e.g., boolean) are atomic. This means one thread can change the value, and another can read it without seeing a corrupted value.
Synchronization: For more complex operations or larger variables, you need explicit synchronization to prevent threads from interfering with each other.


Atomicity (အတွမ်မစ်) ဆိုသည်မှာ အထုပ်အပိုး သဘောတရားဖြစ်ပြီး အချိန်အတိုင်းအတာ တစ်ခုအတွင်း အစအဆုံး ပြီးမြောက်စေသည့် အစိတ်အပိုင်းတစ်ခုလို မြင်နိုင်တဲ့ လုပ်ဆောင်ချက်တစ်ခုဖြစ်ပါတယ်။





// Normal Jump logic
//        if (jump && !isJumping && !isFalling) {
//            isJumping = true;
//            yVelocity = -JUMP_STRENGTH; // Start the jump with negative velocity
//        }
//
//        if (isJumping) {
//            y += yVelocity; // Apply the current velocity to the y position
//            yVelocity += GRAVITY; // Apply gravity to the velocity
//
//            // If velocity becomes positive, the player starts falling
//            if (yVelocity > 0) {
//                isJumping = false;
//                isFalling = true;
//            }
//            setPlayerColor(Color.GREEN);
//        }
//
//        if (isFalling) {
//            y += yVelocity;
//            yVelocity += GRAVITY;
//
//            // If player reaches the ground
//            if (y >= GAME_HEIGHT - playerHeight) {
//                y = GAME_HEIGHT - playerHeight;
//                isFalling = false;
//                yVelocity = 0;
//            }
//            setPlayerColor(Color.BLACK);
//        }



// Handle dashing
        if (isDashing) {
            dashTimer--;
            if (dashTimer <= 0) {
                isDashing = false;
                dashCooldownTimer = dashCooldown;
            } else {
                if (left && !right) {
                    x -= dashSpeed;
                }
                if (right && !left) {
                    x += dashSpeed;
                }
                return; // Skip other movements while dashing
            }
        }

        // Vertical movement (jump and fall)
                if (jump && jumpCount < MAX_JUMPS) {
                    yVelocity = -JUMP_STRENGTH; // Apply jump strength upwards
                    isJumping = true;
                    isFalling = false;
                    jumpCount++;
                    jump = false; // Reset the jump command
                }

                // Apply gravity if jumping
                if (isJumping) {
                    y += yVelocity;
                    yVelocity += GRAVITY;

                    // Check if player has started falling
                    if (yVelocity > 0) {
                        isJumping = false;
                        isFalling = true;
                    }
                }

                // Apply gravity if falling
                if (isFalling) {
                    y += yVelocity;
                    yVelocity += GRAVITY;

                    // Check if player has landed on the ground
                    if (y >= GAME_HEIGHT - playerHeight) {
                        y = GAME_HEIGHT - playerHeight;
                        isFalling = false;
                        yVelocity = 0;
                        jumpCount = 0; // Reset jump count when the player lands
                    }
                }

                 // Handle dash cooldown
                        if (dashCooldownTimer > 0) {
                            dashCooldownTimer--;
                        }